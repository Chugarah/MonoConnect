/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UseStatesEventsImport } from './routes/useStatesEvents'
import { Route as IntoToReactImport } from './routes/intoToReact'
import { Route as EduPropsImport } from './routes/eduProps'
import { Route as EduMiniProjectImport } from './routes/eduMiniProject'
import { Route as EduLoopsImport } from './routes/eduLoops'
import { Route as EduKeysImport } from './routes/eduKeys'
import { Route as EduComponentsImport } from './routes/eduComponents'
import { Route as ConditionalRenderingImport } from './routes/conditionalRendering'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UseStatesEventsRoute = UseStatesEventsImport.update({
  id: '/useStatesEvents',
  path: '/useStatesEvents',
  getParentRoute: () => rootRoute,
} as any)

const IntoToReactRoute = IntoToReactImport.update({
  id: '/intoToReact',
  path: '/intoToReact',
  getParentRoute: () => rootRoute,
} as any)

const EduPropsRoute = EduPropsImport.update({
  id: '/eduProps',
  path: '/eduProps',
  getParentRoute: () => rootRoute,
} as any)

const EduMiniProjectRoute = EduMiniProjectImport.update({
  id: '/eduMiniProject',
  path: '/eduMiniProject',
  getParentRoute: () => rootRoute,
} as any)

const EduLoopsRoute = EduLoopsImport.update({
  id: '/eduLoops',
  path: '/eduLoops',
  getParentRoute: () => rootRoute,
} as any)

const EduKeysRoute = EduKeysImport.update({
  id: '/eduKeys',
  path: '/eduKeys',
  getParentRoute: () => rootRoute,
} as any)

const EduComponentsRoute = EduComponentsImport.update({
  id: '/eduComponents',
  path: '/eduComponents',
  getParentRoute: () => rootRoute,
} as any)

const ConditionalRenderingRoute = ConditionalRenderingImport.update({
  id: '/conditionalRendering',
  path: '/conditionalRendering',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/conditionalRendering': {
      id: '/conditionalRendering'
      path: '/conditionalRendering'
      fullPath: '/conditionalRendering'
      preLoaderRoute: typeof ConditionalRenderingImport
      parentRoute: typeof rootRoute
    }
    '/eduComponents': {
      id: '/eduComponents'
      path: '/eduComponents'
      fullPath: '/eduComponents'
      preLoaderRoute: typeof EduComponentsImport
      parentRoute: typeof rootRoute
    }
    '/eduKeys': {
      id: '/eduKeys'
      path: '/eduKeys'
      fullPath: '/eduKeys'
      preLoaderRoute: typeof EduKeysImport
      parentRoute: typeof rootRoute
    }
    '/eduLoops': {
      id: '/eduLoops'
      path: '/eduLoops'
      fullPath: '/eduLoops'
      preLoaderRoute: typeof EduLoopsImport
      parentRoute: typeof rootRoute
    }
    '/eduMiniProject': {
      id: '/eduMiniProject'
      path: '/eduMiniProject'
      fullPath: '/eduMiniProject'
      preLoaderRoute: typeof EduMiniProjectImport
      parentRoute: typeof rootRoute
    }
    '/eduProps': {
      id: '/eduProps'
      path: '/eduProps'
      fullPath: '/eduProps'
      preLoaderRoute: typeof EduPropsImport
      parentRoute: typeof rootRoute
    }
    '/intoToReact': {
      id: '/intoToReact'
      path: '/intoToReact'
      fullPath: '/intoToReact'
      preLoaderRoute: typeof IntoToReactImport
      parentRoute: typeof rootRoute
    }
    '/useStatesEvents': {
      id: '/useStatesEvents'
      path: '/useStatesEvents'
      fullPath: '/useStatesEvents'
      preLoaderRoute: typeof UseStatesEventsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/conditionalRendering': typeof ConditionalRenderingRoute
  '/eduComponents': typeof EduComponentsRoute
  '/eduKeys': typeof EduKeysRoute
  '/eduLoops': typeof EduLoopsRoute
  '/eduMiniProject': typeof EduMiniProjectRoute
  '/eduProps': typeof EduPropsRoute
  '/intoToReact': typeof IntoToReactRoute
  '/useStatesEvents': typeof UseStatesEventsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/conditionalRendering': typeof ConditionalRenderingRoute
  '/eduComponents': typeof EduComponentsRoute
  '/eduKeys': typeof EduKeysRoute
  '/eduLoops': typeof EduLoopsRoute
  '/eduMiniProject': typeof EduMiniProjectRoute
  '/eduProps': typeof EduPropsRoute
  '/intoToReact': typeof IntoToReactRoute
  '/useStatesEvents': typeof UseStatesEventsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/conditionalRendering': typeof ConditionalRenderingRoute
  '/eduComponents': typeof EduComponentsRoute
  '/eduKeys': typeof EduKeysRoute
  '/eduLoops': typeof EduLoopsRoute
  '/eduMiniProject': typeof EduMiniProjectRoute
  '/eduProps': typeof EduPropsRoute
  '/intoToReact': typeof IntoToReactRoute
  '/useStatesEvents': typeof UseStatesEventsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/conditionalRendering'
    | '/eduComponents'
    | '/eduKeys'
    | '/eduLoops'
    | '/eduMiniProject'
    | '/eduProps'
    | '/intoToReact'
    | '/useStatesEvents'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/conditionalRendering'
    | '/eduComponents'
    | '/eduKeys'
    | '/eduLoops'
    | '/eduMiniProject'
    | '/eduProps'
    | '/intoToReact'
    | '/useStatesEvents'
  id:
    | '__root__'
    | '/'
    | '/conditionalRendering'
    | '/eduComponents'
    | '/eduKeys'
    | '/eduLoops'
    | '/eduMiniProject'
    | '/eduProps'
    | '/intoToReact'
    | '/useStatesEvents'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConditionalRenderingRoute: typeof ConditionalRenderingRoute
  EduComponentsRoute: typeof EduComponentsRoute
  EduKeysRoute: typeof EduKeysRoute
  EduLoopsRoute: typeof EduLoopsRoute
  EduMiniProjectRoute: typeof EduMiniProjectRoute
  EduPropsRoute: typeof EduPropsRoute
  IntoToReactRoute: typeof IntoToReactRoute
  UseStatesEventsRoute: typeof UseStatesEventsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConditionalRenderingRoute: ConditionalRenderingRoute,
  EduComponentsRoute: EduComponentsRoute,
  EduKeysRoute: EduKeysRoute,
  EduLoopsRoute: EduLoopsRoute,
  EduMiniProjectRoute: EduMiniProjectRoute,
  EduPropsRoute: EduPropsRoute,
  IntoToReactRoute: IntoToReactRoute,
  UseStatesEventsRoute: UseStatesEventsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/conditionalRendering",
        "/eduComponents",
        "/eduKeys",
        "/eduLoops",
        "/eduMiniProject",
        "/eduProps",
        "/intoToReact",
        "/useStatesEvents"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/conditionalRendering": {
      "filePath": "conditionalRendering.tsx"
    },
    "/eduComponents": {
      "filePath": "eduComponents.tsx"
    },
    "/eduKeys": {
      "filePath": "eduKeys.tsx"
    },
    "/eduLoops": {
      "filePath": "eduLoops.tsx"
    },
    "/eduMiniProject": {
      "filePath": "eduMiniProject.tsx"
    },
    "/eduProps": {
      "filePath": "eduProps.tsx"
    },
    "/intoToReact": {
      "filePath": "intoToReact.tsx"
    },
    "/useStatesEvents": {
      "filePath": "useStatesEvents.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
