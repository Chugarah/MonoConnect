# TanStack Router Rules

## File Structure & Naming

- Use file-based routing with clear, semantic file names
- Follow directory-based structure for complex route hierarchies
- Use pathless route group directories with () for organizational grouping
- Prefix pathless routes with underscore (_)
- Use $ prefix for dynamic segments
- Use .index.tsx for index routes
- Use .route.tsx for layout/parent routes

## Route Creation & Types

- Always use strict TypeScript with proper type definitions
- Use createRootRoute() for the root route
- Use createFileRoute() for all other routes
- Leverage type-safe path params and search params
- Define proper interfaces for route params and search params
- Use Zod for runtime validation of search params

## Route Organization

- Implement proper route nesting using layout routes
- Use non-nested routes with underscore suffix when needed
- Configure proper 404/NotFound routes at router level
- Implement proper error boundaries and error components
- Use pathless routes for shared layouts and logic

## Navigation & Links  

- Use type-safe <Link> components with proper params
- Implement proper search param handling with validateSearch
- Use useNavigate hook for programmatic navigation
- Handle path params properly in dynamic segments
- Implement proper navigation blocking when needed

## Data & State Management

- Configure proper loaders for data fetching
- Use proper error handling in loaders and components
- Implement proper loading states and pending UI
- Use proper caching strategies with React Query
- Handle search params state properly

## Code Style

- Follow functional programming patterns
- Use proper TypeScript types and interfaces
- Implement proper code splitting
- Follow proper component structure
- Use proper error handling patterns

## Performance

- Implement proper code splitting
- Use proper lazy loading strategies
- Configure proper preloading
- Handle proper scroll restoration
- Implement proper caching strategies

## Testing

- Write proper unit tests for routes
- Test proper navigation flows
- Test proper error handling
- Test proper loading states
- Test proper search param handling

## Security

- Implement proper authentication routes
- Handle proper authorization
- Sanitize URL params and search params
- Implement proper CSRF protection
- Follow proper security best practices

## Documentation

- Document route structure clearly
- Document navigation patterns
- Document data flow
- Document error handling
- Document security measures

## References

- [TanStack Router Docs](https://tanstack.com/router/v1/docs/framework/react/guide/routing-concepts)
- [Frontend Masters TanStack Router Guide](https://frontendmasters.com/blog/introducing-tanstack-router/)

## Cross-Platform Routing

- Use platform-specific routing strategies:
  - Use TanStack Router for web applications
  - Use Expo Router for native applications
  - Maintain shared file system conventions between both

- File System Structure:
  - Create a single shared app directory for cross-platform routes
  - Use platform-specific layout files when needed
  - Follow Expo Router's file naming conventions for compatibility
  - Use platform-specific extensions (.web.tsx, .native.tsx)

- Navigation Patterns:
  - Implement web-specific navigation using TanStack Router
  - Use native navigation patterns with Expo Router/React Navigation
  - Create platform-agnostic Link components when possible
  - Handle deep linking appropriately per platform

- Data & State Management:
  - Use TanStack Router's loader API for web routes
  - Implement native-specific data fetching for mobile
  - Handle search params appropriately per platform
  - Create platform-specific hooks when needed

- Performance Considerations:
  - Use appropriate bundler for each platform (Vite for web, Metro for native)
  - Implement proper code splitting strategies per platform
  - Consider bundle size implications for web builds
  - Use platform-specific optimizations

When programming react, always give me in strict eslinted typescript
