@use "@scss/abstracts" as a;

/// =============================================================================
/// Layout
/// =============================================================================

/// @name container-query-wrapper
/// @group Layout
///
/// Creates a container for container queries
///
/// This mixin sets up a container to be used with CSS Container Queries.
/// It sets the container-type to inline-size and assigns a custom container-name.
///
/// @param {String} $container-name - The name of the container to be used in container queries
///
/// @example code-scss
///   .my-component {
///     @include container-query-wrapper('component-container');
///   }
///
/// @example code-css
///   .my-component {
///     container-type: inline-size;
///     container-name: component-container;
///   }
@mixin container-query-wrapper($container-name) {
  container-type: inline-size;
  container-name: $container-name;
}

/// @name container-query
/// @group Layout
///
/// Container Query for responsive design, we check the with of container
/// and sending the container further, got help also from Phind for the part
/// where #{$max -1} to avoid clipping, layout changing i mid while going to
/// next breakpoint
///
/// @param {String} $container-name - The name of the container to be used in container queries
/// @param {String} $min - Min With of container size
/// @param {String} $max - Max With of container size, this also could be null
/// @example code-scss
/// Phones
///  @include a.container-query(header,0,map-get($map: $breakpoints, $key: 'medium')){
///    .header-navigation{
///      background-color: red;
///    }
///  }
@mixin container-query($container-name, $min, $max: null) {
  @if $max {
    @container #{$container-name} (min-width: #{$min}) and (max-width: #{$max - 1}) {
      /// Passing the content further
      @content;
    }
  } @else if $min {
    @container #{$container-name} (min-width: #{$min}) {
      /// Passing the content further
      @content;
    }
  }
}


@mixin responsive-container($container-name) {
  @apply w-full max-w-desktop m-auto;

  /// Large Desktop, we want some spacing so not the content gets to the limit of the browser
  @include container-query($container-name, 0, a.$bp-xlarge-2) {
    @apply px-14;
  }
  /// Tablet Mode
  @include container-query($container-name, 0, a.$bp-xlarge-1) {
    @apply px-40;
  }
}
