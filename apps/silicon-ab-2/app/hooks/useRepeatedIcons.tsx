import { IconFA } from "@/app/components/common/IconFA";
import { useMemo } from "react";
import type { UseRepeatedIconsProps } from "@/types/theme/themeTypes";
import type { IconDefinition } from "@fortawesome/free-regular-svg-icons";

/**
 * Creates a single icon element with the specified properties
 * @param {IconDefinition} icon - The FontAwesome icon definition to use
 * @param {string} classNames - CSS classes to apply to the icon
 * @param {string} titlePrefix - Prefix for the icon's title attribute
 * @param {number} index - Index of the icon in the array
 * @returns {JSX.Element} A rendered IconFA component
 */

/// Got Help with Phind AI partial
function createIconElement(
	icon: IconDefinition,
	classNames: string,
	titlePrefix: string,
	index: number,
) {
	return (
		<IconFA
			key={`${titlePrefix}-${index}`}
			icon={icon}
			classNames={classNames}
			title={`${titlePrefix} ${index + 1}`}
		/>
	);
}

/// Some of the code is generated by AI Phind
/**
 * Hook that generates an array of repeated icons with memoization
 * @param {Object} props - The properties object
 * @param {IconDefinition} props.icon - The FontAwesome icon definition to repeat
 * @param {number} props.count - Number of times to repeat the icon
 * @param {string} props.classNames - CSS classes to apply to each icon
 * @param {string} [props.titlePrefix="Icon"] - Prefix for each icon's title attribute
 * @returns {JSX.Element[]} An array of rendered icon elements
 */
export function useRepeatedIcons({
	icon,
	count,
	classNames,
	titlePrefix = "Icon",
}: UseRepeatedIconsProps) {
	return useMemo(
		() =>
			Array.from({ length: count }).map((_, index) => {
				return createIconElement(icon, classNames, titlePrefix, index);
			}),
		[icon, count, classNames, titlePrefix],
	);
}
